//verilog design code
  
  module fifo(clk, rst, buf_in, buf_out, wr_en, rd_en, buf_full, buf_empty, fifo_counter);
  input clk, rst, wr_en, rd_en;
  input [7:0]buf_in;
  output [7:0]buf_out;
  output buf_full, buf_empty;
  output [7:0]fifo_counter;
  
    reg [7:0]buf_out;
  reg buf_full, buf_empty;
  reg [6:0] fifo_counter;
  reg [3:0]rd_ptr, wr_ptr;
  reg [7:0] buf_mem[63:0];
   
  
  always@(fifo_counter) begin
    buf_empty=(fifo_counter==0);
    buf_full=(fifo_counter==64);
  end
  
  always@(posedge clk or posedge rst) begin
    if(rst)
      fifo_counter<=0;
    else if( (!buf_empty && rd_en) && (!buf_full && wr_en) )
        fifo_counter<=fifo_counter;
    else if(!buf_full && wr_en)
        fifo_counter<=fifo_counter+1;
    else if(!buf_empty && rd_en)
        fifo_counter<=fifo_counter-1;
    else
      fifo_counter<=fifo_counter;
  end

 always@(posedge clk or posedge rst) begin
  if(rst)
    buf_out<=0;
  else begin
    if(!buf_empty && rd_en)
      buf_out<=buf_mem[rd_ptr];
    else
      buf_out<=buf_out;
  end
 end

 always@(posedge clk) begin
  if(!buf_full && wr_en)
    buf_mem[wr_ptr]<=buf_in;
  else
    buf_mem[wr_ptr]<=buf_mem[wr_ptr];
 end

 always@(posedge clk or posedge rst) begin
   if(rst) begin
     wr_ptr<=0;
     rd_ptr<=0;
   end 
   else begin
     if(!buf_full && wr_en)
       wr_ptr<=wr_ptr+1;
     else
       wr_ptr<=wr_ptr;
     if(!buf_empty && rd_en)
       rd_ptr<=rd_ptr+1;
     else
       rd_ptr<=rd_ptr;
   end
 end
endmodule

// Testbench for FIFO

`timescale 1ns/1ps

module fifo_tb;

  // Testbench signals
  reg clk;
  reg rst;
  reg wr_en;
  reg rd_en;
  reg [7:0] buf_in;
  wire [7:0] buf_out;
  wire buf_full;
  wire buf_empty;
  wire [7:0] fifo_counter;

  // Instantiate the FIFO module
  fifo uut (
    .clk(clk),
    .rst(rst),
    .wr_en(wr_en),
    .rd_en(rd_en),
    .buf_in(buf_in),
    .buf_out(buf_out),
    .buf_full(buf_full),
    .buf_empty(buf_empty),
    .fifo_counter(fifo_counter)
  );

  // Clock generation
  initial begin
    $dumpfile("fifo.vcd");
    $dumpvars(1,fifo_tb);
    clk = 0;
    forever #5 clk = ~clk; // 10ns clock period
  end

  // Test sequence
  initial begin
    // Initialize signals
    rst = 1;
    wr_en = 0;
    rd_en = 0;
    buf_in = 8'd0;

    // Reset the FIFO
    #10 rst = 0;

    // Write data into FIFO
    $display("Writing data to FIFO");
    repeat (10) begin
      @(posedge clk);
      wr_en = 1;
      buf_in = $random % 256; // Generate random data
      $display("Time: %0t | Writing: %0d", $time, buf_in);
    end
    wr_en = 0;

    // Read data from FIFO
    $display("Reading data from FIFO");
    repeat (10) begin
      @(posedge clk);
      rd_en = 1;
      $display("Time: %0t | Reading: %0d", $time, buf_out);
    end
    rd_en = 0;

    // Check FIFO empty
    @(posedge clk);
    if (buf_empty)
      $display("FIFO is empty as expected.");
    else
      $display("Error: FIFO is not empty.");

    // Write and read simultaneously
    $display("Simultaneous write and read");
    repeat (5) begin
      @(posedge clk);
      wr_en = 1;
      rd_en = 1;
      buf_in = $random % 256;
      $display("Time: %0t | Writing: %0d, Reading: %0d", $time, buf_in, buf_out);
    end
    wr_en = 0;
    rd_en = 0;

    // Reset and test again
    $display("Resetting FIFO");
    rst = 1;
    @(posedge clk);
    rst = 0;

    $display("Test completed.");
    $finish;
  end

endmodule
